version: '3.8'

services:
  # === LOCAL BUILD SERVICES (Fast Development) ===
  
  # Main API Server - Use remote image temporarily for testing
  server:
    image: ghcr.io/buildorin/orin-server:latest
    platform: linux/amd64
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - minio
      - keycloak
    env_file:
      - .env
    volumes:
      - ./models.yaml:/app/models.yaml:ro
    environment:
      - AUTH__KEYCLOAK_URL=http://keycloak:8080
      - AUTH__KEYCLOAK_REALM=orin
      - AWS__ENDPOINT=http://minio:9000
      - AWS__PRESIGNED_URL_ENDPOINT=http://localhost:9000
      - AWS__REGION=us-east-1
      - LLM__MODELS_PATH=/app/models.yaml
      - PG__URL=postgresql://postgres:postgres@postgres:5432/chunkr
      - REDIS__URL=redis://redis:6379
      - WORKER__GENERAL_OCR_URL=http://ocr:8000
      - WORKER__SEGMENTATION_URL=http://segmentation:8000
      - WORKER__SERVER_URL=http://server:8000

  # Task Workers - Remote Image for Now (Fast Start)
  task:
    image: ghcr.io/buildorin/orin-task:latest
    platform: linux/amd64
    depends_on:
      - postgres
      - redis
      - minio
      - server
    env_file:
      - .env
    volumes:
      - ./models.yaml:/app/models.yaml:ro
    environment:
      - RUST_BACKTRACE=1
      - AWS__ACCESS_KEY=minioadmin
      - AWS__SECRET_KEY=minioadmin
      - AWS__ENDPOINT=http://minio:9000
      - AWS__REGION=us-east-1
      - WORKER__S3_BUCKET=chunkr
      - WORKER__SERVER_URL=http://server:8000
      - WORKER__SEGMENTATION_URL=http://segmentation:8000
      - WORKER__GENERAL_OCR_URL=http://ocr:8000
      - PG__URL=postgresql://postgres:postgres@postgres:5432/chunkr
      - REDIS__URL=redis://redis:6379
    deploy:
      replicas: 1

  # Web Frontend - Build locally with localhost URLs
  web:
    build:
      context: .
      dockerfile: docker/web/Dockerfile
      args:
        VITE_KEYCLOAK_URL: http://localhost:8080
        VITE_KEYCLOAK_REALM: orin
        VITE_KEYCLOAK_CLIENT_ID: orin
        VITE_KEYCLOAK_REDIRECT_URI: http://localhost:5173
        VITE_KEYCLOAK_POST_LOGOUT_REDIRECT_URI: http://localhost:5173
        VITE_API_URL: http://localhost:8000
    ports:
      - "5173:80"
    restart: unless-stopped

  # === REMOTE IMAGES (Heavy ML Services) ===
  
  # OCR Service - Use Remote Image (Heavy ML)
  ocr:
    image: ghcr.io/buildorin/orin-ocr:latest
    platform: linux/amd64  # Emulated on Mac ARM
    expose:
      - "8000"
    environment:
      - MAX_BATCH_SIZE=4
      - OMP_NUM_THREADS=4
      - MKL_NUM_THREADS=4
    restart: unless-stopped

  # Segmentation Service - Use Remote Image (Heavy ML)  
  segmentation:
    image: ghcr.io/buildorin/orin-segmentation:latest
    platform: linux/amd64  # Emulated on Mac ARM
    expose:
      - "8000"
    environment:
      - MAX_BATCH_SIZE=2
      - BATCH_WAIT_TIME=0.5
      - OVERLAP_THRESHOLD=0.025
      - SCORE_THRESHOLD=0.2
      - OMP_NUM_THREADS=4
      - MKL_NUM_THREADS=4
    restart: unless-stopped

  # === STANDARD SERVICES ===
  
  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: chunkr
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # S3 Storage
  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 1
    restart: unless-stopped

  # MinIO Initialization
  minio-init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
        /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin &&
        /usr/bin/mc mb myminio/chunkr --ignore-existing &&
        /usr/bin/mc anonymous set public myminio/chunkr
      "
    restart: "no"

  # Authentication
  keycloak:
    image: quay.io/keycloak/keycloak:25.0.2
    ports:
      - "8080:8080"
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_HTTP_ENABLED=true
      - KC_HOSTNAME=localhost
      - KC_HOSTNAME_PORT=8080
      - KC_DB_URL=jdbc:postgresql://postgres:5432/chunkr
      - KC_DB_USERNAME=postgres
      - KC_DB_PASSWORD=postgres
      - KC_HEALTH_ENABLED=true
      - KC_TRANSACTION_XA_ENABLED=false
    volumes:
      - ./realm-export.json:/opt/keycloak/data/import/realm-export.json
    command: ["start-dev", "--import-realm"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data: